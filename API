local OmniUI = {
    Version = "1.0.1",
    Build = "OMNI-CYBERFORGE-V2",
    Flags = {},
    Themes = {
        CyberForge = {
            TextColor = Color3.fromRGB(255, 255, 255),
            TextGlow = Color3.fromRGB(0, 255, 149),
            Background = Color3.fromRGB(10, 10, 15),
            BackgroundGradient = {Color3.fromRGB(10, 10, 15), Color3.fromRGB(20, 20, 30)},
            Topbar = Color3.fromRGB(15, 15, 20),
            Shadow = Color3.fromRGB(0, 0, 0),
            ElementBackground = Color3.fromRGB(20, 20, 25),
            ElementBackgroundHover = Color3.fromRGB(30, 30, 35),
            ElementStroke = Color3.fromRGB(0, 255, 149),
            SecondaryElementStroke = Color3.fromRGB(50, 50, 60),
            SliderBackground = Color3.fromRGB(30, 30, 35),
            SliderProgress = Color3.fromRGB(0, 255, 149),
            SliderStroke = Color3.fromRGB(0, 200, 120),
            ToggleBackground = Color3.fromRGB(25, 25, 30),
            ToggleEnabled = Color3.fromRGB(0, 255, 149),
            ToggleDisabled = Color3.fromRGB(60, 60, 70),
            ToggleEnabledStroke = Color3.fromRGB(0, 200, 120),
            ToggleDisabledStroke = Color3.fromRGB(70, 70, 80),
            DropdownSelected = Color3.fromRGB(25, 25, 30),
            DropdownUnselected = Color3.fromRGB(20, 20, 25),
            InputBackground = Color3.fromRGB(20, 20, 25),
            InputStroke = Color3.fromRGB(0, 255, 149),
            PlaceholderColor = Color3.fromRGB(100, 100, 110),
            NotificationBackground = Color3.fromRGB(15, 15, 20),
            NotificationStroke = Color3.fromRGB(0, 255, 149),
        },
        NeonTokyo = {
            TextColor = Color3.fromRGB(255, 255, 255),
            TextGlow = Color3.fromRGB(255, 105, 180),
            Background = Color3.fromRGB(15, 15, 20),
            BackgroundGradient = {Color3.fromRGB(15, 15, 20), Color3.fromRGB(25, 25, 35)},
            Topbar = Color3.fromRGB(20, 20, 25),
            Shadow = Color3.fromRGB(0, 0, 0),
            ElementBackground = Color3.fromRGB(25, 25, 30),
            ElementBackgroundHover = Color3.fromRGB(35, 35, 40),
            ElementStroke = Color3.fromRGB(255, 105, 180),
            SecondaryElementStroke = Color3.fromRGB(60, 60, 70),
            SliderBackground = Color3.fromRGB(35, 35, 40),
            SliderProgress = Color3.fromRGB(255, 105, 180),
            SliderStroke = Color3.fromRGB(200, 80, 140),
            ToggleBackground = Color3.fromRGB(30, 30, 35),
            ToggleEnabled = Color3.fromRGB(255, 105, 180),
            ToggleDisabled = Color3.fromRGB(70, 70, 80),
            ToggleEnabledStroke = Color3.fromRGB(200, 80, 140),
            ToggleDisabledStroke = Color3.fromRGB(80, 80, 90),
            DropdownSelected = Color3.fromRGB(30, 30, 35),
            DropdownUnselected = Color3.fromRGB(25, 25, 30),
            InputBackground = Color3.fromRGB(25, 25, 30),
            InputStroke = Color3.fromRGB(255, 105, 180),
            PlaceholderColor = Color3.fromRGB(110, 110, 120),
            NotificationBackground = Color3.fromRGB(20, 20, 25),
            NotificationStroke = Color3.fromRGB(255, 105, 180),
        },
    },
}

-- Сервисы Roblox
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

-- Безопасное получение PlayerGui
local function getPlayerGui()
    local localPlayer = Players.LocalPlayer
    if localPlayer then
        local playerGui = localPlayer:WaitForChild("PlayerGui", 5)
        if playerGui then
            return playerGui
        else
            debugLog("PlayerGui не найден в течение 5 секунд", "error")
        end
    else
        debugLog("LocalPlayer не найден", "error")
    end
    return nil
end

-- Конфигурация
local Config = {
    Folder = "OmniUI",
    ConfigFile = "settings.json",
    API_URL = "https://mock.api/roblox",
    AnalyticsEnabled = true,
    DefaultKeybind = "K",
    Font = Enum.Font.SourceSans,
    Debug = true,
}

-- Утилита для отладки
local function debugLog(message, level)
    if Config.Debug then
        local prefix = level == "error" and "[OmniUI ERROR]" or "[OmniUI DEBUG]"
        local success, _ = pcall(function()
            print(prefix .. " " .. message)
        end)
        if not success then
            -- Запасной вариант, если print недоступен
            local output = Instance.new("StringValue")
            output.Value = prefix .. " " .. message
            output.Parent = game:GetService("LogService")
            output:Destroy()
        end
    end
end

-- Проверка наличия функций isfolder/writefile
local function isFileSystemSupported()
    local success, _ = pcall(function()
        return isfolder and writefile and isfile and readfile
    end)
    return success
end

-- Модуль анимаций
local Animations = {}

function Animations:Create(instance, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(
        duration or 0.3,
        easingStyle or Enum.EasingStyle.Quad,
        easingDirection or Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    debugLog("Анимация создана для " .. instance.Name .. ": " .. HttpService:JSONEncode(properties), "info")
    return tween
end

function Animations:Pulse(stroke, minTransparency, maxTransparency, duration)
    local tween = TweenService:Create(
        stroke,
        TweenInfo.new(duration or 1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
        { Transparency = maxTransparency }
    )
    tween:Play()
    debugLog("Пульсирующая анимация создана для UIStroke", "info")
    return tween
end

-- Модуль API
local API = {}

local function isHttpEnabled()
    local success, enabled = pcall(function()
        return HttpService:GetHttpEnabled()
    end)
    if not success then
        debugLog("Ошибка проверки HTTP: " .. tostring(enabled), "error")
    end
    return success and enabled
end

function API:GetPlayerData(playerId)
    if not isHttpEnabled() then
        debugLog("HTTP-запросы отключены в настройках игры", "error")
        return nil
    end
    local success, result = pcall(function()
        return HttpService:GetAsync(Config.API_URL .. "/player/" .. tostring(playerId))
    end)
    if success then
        debugLog("Данные игрока получены для ID: " .. playerId, "info")
        return HttpService:JSONDecode(result)
    else
        debugLog("Не удалось получить данные игрока: " .. tostring(result), "error")
        return nil
    end
end

function API:UpdateInventory(playerId, itemId, quantity)
    if not isHttpEnabled() then
        debugLog("HTTP-запросы отключены в настройках игры", "error")
        return nil
    end
    local success, result = pcall(function()
        return HttpService:PostAsync(
            Config.API_URL .. "/inventory/update",
            HttpService:JSONEncode({ playerId = playerId, itemId = itemId, quantity = quantity }),
            Enum.HttpContentType.ApplicationJson
        )
    end)
    if success then
        debugLog("Инвентарь обновлён для ID: " .. playerId, "info")
        return HttpService:JSONDecode(result)
    else
        debugLog("Не удалось обновить инвентарь: " .. tostring(result), "error")
        return nil
    end
end

-- Модуль иконок
local Icons = {
    Default = "rbxassetid://4483362458",
    Warning = "rbxassetid://1234567890",
    Error = "rbxassetid://0987654321",
    Info = "rbxassetid://1122334455",
}

function Icons:GetIcon(name)
    local icon = Icons[name] or Icons.Default
    debugLog("Иконка запрошена: " .. name .. ", возвращена: " .. icon, "info")
    return icon
end

-- Модуль конфигураций
local Configurations = {}

function Configurations:Save(data)
    if not isFileSystemSupported() then
        debugLog("Файловая система не поддерживается", "error")
        return
    end
    local successFolder, _ = pcall(function()
        if not isfolder(Config.Folder) then
            makefolder(Config.Folder)
            debugLog("Создана папка: " .. Config.Folder, "info")
        end
        return true
    end)
    if not successFolder then
        debugLog("Ошибка создания папки: " .. Config.Folder, "error")
        return
    end
    local success, err = pcall(function()
        writefile(Config.Folder .. "/" .. Config.ConfigFile, HttpService:JSONEncode(data))
    end)
    if success then
        debugLog("Конфигурация сохранена", "info")
    else
        debugLog("Ошибка сохранения конфигурации: " .. tostring(err), "error")
    end
end

function Configurations:Load()
    if not isFileSystemSupported() then
        debugLog("Файловая система не поддерживается", "error")
        return {}
    end
    local success, exists = pcall(function()
        return isfolder(Config.Folder) and isfile(Config.Folder .. "/" .. Config.ConfigFile)
    end)
    if not success or not exists then
        debugLog("Конфигурация не найдена", "info")
        return {}
    end
    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile(Config.Folder .. "/" .. Config.ConfigFile))
    end)
    if success then
        debugLog("Конфигурация загружена", "info")
        return data
    else
        debugLog("Ошибка загрузки конфигурации: " .. tostring(data), "error")
        return {}
    end
end

-- Модуль аналитики
local Analytics = {}

function Analytics:SendReport()
    if not Config.AnalyticsEnabled then
        debugLog("Аналитика отключена", "info")
        return
    end
    if not isHttpEnabled() then
        debugLog("HTTP-запросы отключены для аналитики", "error")
        return
    end
    task.spawn(function()
        local success, err = pcall(function()
            return HttpService:PostAsync(
                "https://mock.analytics/report",
                HttpService:JSONEncode({ build = OmniUI.Build, version = OmniUI.Version, userId = Players.LocalPlayer and Players.LocalPlayer.UserId or "Unknown" }),
                Enum.HttpContentType.ApplicationJson
            )
        end)
        if success then
            debugLog("Отчёт аналитики отправлен", "info")
        else
            debugLog("Ошибка отправки аналитики: " .. tostring(err), "error")
        end
    end)
end

-- Основной модуль GUI
local GUI = {
    Windows = {},
    SelectedTheme = OmniUI.Themes.CyberForge,
}

function GUI:ChangeTheme(theme)
    local themeName = type(theme) == "string" and theme or "Custom"
    if type(theme) == "string" then
        GUI.SelectedTheme = OmniUI.Themes[theme] or OmniUI.Themes.CyberForge
    elseif type(theme) == "table" then
        GUI.SelectedTheme = theme
    end
    for windowName, window in pairs(GUI.Windows) do
        if window and window.MainFrame and window.Topbar and window.Title then
            window.MainFrame.BackgroundColor3 = GUI.SelectedTheme.Background
            window.MainFrame.UIGradient.Color = ColorSequence.new(GUI.SelectedTheme.BackgroundGradient)
            window.Topbar.BackgroundColor3 = GUI.SelectedTheme.Topbar
            window.Title.TextColor3 = GUI.SelectedTheme.TextColor
            window.Title.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            for _, tab in ipairs(window.Tabs) do
                tab.Instance.BackgroundColor3 = GUI.SelectedTheme.Background
                for _, element in ipairs(tab.Elements) do
                    if element:IsA("Frame") then
                        element.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
                        if element.UIStroke then
                            element.UIStroke.Color = GUI.SelectedTheme.ElementStroke
                        end
                    end
                end
            end
            debugLog("Тема изменена для окна: " .. windowName .. ", новая тема: " .. themeName, "info")
        end
    end
end

function GUI:CreateWindow(settings)
    local guiParent = CoreGui
    local playerGui = getPlayerGui()
    local success, canUseCoreGui = pcall(function()
        local testGui = Instance.new("ScreenGui")
        testGui.Parent = CoreGui
        testGui:Destroy()
        return true
    end)
    if not success or not canUseCoreGui then
        debugLog("CoreGui недоступен, использование PlayerGui", "warning")
        guiParent = playerGui or error("PlayerGui недоступен")
    end

    local window = {
        Name = settings.Name or "OmniUI Hack",
        Tabs = {},
        Visible = true,
        Minimised = false,
        Hidden = false,
        Instance = Instance.new("ScreenGui"),
        MainFrame = Instance.new("Frame"),
        Topbar = Instance.new("Frame"),
        Title = Instance.new("TextLabel"),
        ConfigSaving = settings.ConfigurationSaving or { Enabled = false },
        Keybind = settings.Keybind or Config.DefaultKeybind,
    }

    window.Instance.Name = "OmniUI_" .. window.Name
    window.Instance.Parent = guiParent
    window.Instance.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    window.Instance.DisplayOrder = 100000
    window.Instance.Enabled = true
    window.Instance.ResetOnSpawn = false
    debugLog("ScreenGui создан: " .. window.Instance.Name .. ", Parent: " .. guiParent.Name, "info")

    window.MainFrame.Size = UDim2.new(0, 450, 0, 400)
    window.MainFrame.Position = UDim2.new(0.5, -225, 0.5, -200)
    window.MainFrame.BackgroundColor3 = GUI.SelectedTheme.Background
    window.MainFrame.BackgroundTransparency = 0
    window.MainFrame.Parent = window.Instance
    window.MainFrame.ClipsDescendants = true

    local uiGradient = Instance.new("UIGradient")
    uiGradient.Color = ColorSequence.new(GUI.SelectedTheme.BackgroundGradient)
    uiGradient.Parent = window.MainFrame

    local uiStroke = Instance.new("UIStroke")
    uiStroke.Color = GUI.SelectedTheme.ElementStroke
    uiStroke.Thickness = 2
    uiStroke.Parent = window.MainFrame

    window.Topbar.Size = UDim2.new(1, 0, 0, 40)
    window.Topbar.BackgroundColor3 = GUI.SelectedTheme.Topbar
    window.Topbar.BackgroundTransparency = 0.2
    window.Topbar.Parent = window.MainFrame

    local topbarStroke = Instance.new("UIStroke")
    topbarStroke.Color = GUI.SelectedTheme.ElementStroke
    topbarStroke.Thickness = 1.5
    topbarStroke.Parent = window.Topbar

    window.Title.Size = UDim2.new(1, -10, 1, 0)
    window.Title.Position = UDim2.new(0, 10, 0, 0)
    window.Title.Text = window.Name
    window.Title.TextColor3 = GUI.SelectedTheme.TextColor
    window.Title.Font = Config.Font
    window.Title.TextStrokeTransparency = 0.8
    window.Title.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
    window.Title.BackgroundTransparency = 1
    window.Title.Parent = window.Topbar

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -40, 0, 5)
    closeButton.Text = "X"
    closeButton.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
    closeButton.TextColor3 = GUI.SelectedTheme.TextColor
    closeButton.Font = Config.Font
    closeButton.Parent = window.Topbar

    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Size = UDim2.new(0, 30, 0, 30)
    minimizeButton.Position = UDim2.new(1, -75, 0, 5)
    minimizeButton.Text = "-"
    minimizeButton.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
    minimizeButton.TextColor3 = GUI.SelectedTheme.TextColor
    minimizeButton.Font = Config.Font
    minimizeButton.Parent = window.Topbar

    -- Улучшенная логика перетаскивания
    local dragInteract = Instance.new("TextButton")
    dragInteract.Size = UDim2.new(1, -80, 0, 40)
    dragInteract.Position = UDim2.new(0, 0, 0, 0)
    dragInteract.BackgroundTransparency = 1
    dragInteract.Text = ""
    dragInteract.Parent = window.Topbar

    local dragging = false
    local dragStartPos, frameStartPos

    dragInteract.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStartPos = Vector2.new(input.Position.X, input.Position.Y)
            frameStartPos = window.MainFrame.Position
            debugLog("Начато перетаскивание: Начальная позиция " .. tostring(dragStartPos), "info")
        end
    end)

    dragInteract.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            debugLog("Перетаскивание завершено", "info")
        end
    end)

    local dragConnection = UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local currentPos = Vector2.new(input.Position.X, input.Position.Y)
            local delta = currentPos - dragStartPos
            local newX = math.clamp(frameStartPos.X.Offset + delta.X, 0, window.Instance.AbsoluteSize.X - window.MainFrame.AbsoluteSize.X)
            local newY = math.clamp(frameStartPos.Y.Offset + delta.Y, 0, window.Instance.AbsoluteSize.Y - window.MainFrame.AbsoluteSize.Y)
            window.MainFrame.Position = UDim2.new(0, newX, 0, newY)
            debugLog("Перетаскивание: Новая позиция (" .. newX .. ", " .. newY .. ")", "info")
        end
    end)

    closeButton.MouseButton1Click:Connect(function()
        window.Instance:Destroy()
        if dragConnection then
            dragConnection:Disconnect()
        end
        debugLog("Окно закрыто: " .. window.Name, "info")
    end)

    minimizeButton.MouseButton1Click:Connect(function()
        window.Minimised = not window.Minimised
        local targetSize = window.Minimised and UDim2.new(0, 450, 0, 40) or UDim2.new(0, 450, 0, 400)
        Animations:Create(window.MainFrame, {Size = targetSize}, 0.3)
        debugLog("Окно " .. (window.Minimised and "свёрнуто" or "развёрнуто") .. ": " .. window.Name, "info")
    end)

    function window:CreateTab(tabName, icon)
        local tab = {
            Name = tabName,
            Elements = {},
            Instance = Instance.new("Frame"),
            Button = Instance.new("TextButton"),
        }

        tab.Instance.Size = UDim2.new(1, 0, 1, -40)
        tab.Instance.Position = UDim2.new(0, 0, 0, 40)
        tab.Instance.BackgroundTransparency = 1
        tab.Instance.Parent = window.MainFrame
        tab.Instance.Visible = false

        tab.Button.Size = UDim2.new(0, 100, 0, 30)
        tab.Button.Position = UDim2.new(#window.Tabs * 0.2, 10, 0, 5)
        tab.Button.Text = tabName
        tab.Button.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
        tab.Button.TextColor3 = GUI.SelectedTheme.TextColor
        tab.Button.Font = Config.Font
        tab.Button.TextStrokeTransparency = 0.8
        tab.Button.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
        tab.Button.Parent = window.Topbar

        local tabStroke = Instance.new("UIStroke")
        tabStroke.Color = GUI.SelectedTheme.ElementStroke
        tabStroke.Thickness = 1
        tabStroke.Parent = tab.Button

        if icon then
            local tabIcon = Instance.new("ImageLabel")
            tabIcon.Size = UDim2.new(0, 20, 0, 20)
            tabIcon.Position = UDim2.new(0, 5, 0, 5)
            tabIcon.Image = Icons:GetIcon(icon)
            tabIcon.BackgroundTransparency = 1
            tabIcon.Parent = tab.Button
        end

        tab.Button.MouseButton1Click:Connect(function()
            for _, t in ipairs(window.Tabs) do
                t.Instance.Visible = (t == tab)
                t.Button.BackgroundColor3 = (t == tab) and GUI.SelectedTheme.ElementBackgroundHover or GUI.SelectedTheme.ElementBackground
                t.Button.UIStroke.Transparency = (t == tab) and 0 or 0.5
            end
            debugLog("Вкладка активирована: " .. tabName .. ", Visible: " .. tostring(tab.Instance.Visible), "info")
        end)

        tab.Button.MouseEnter:Connect(function()
            Animations:Create(tab.Button, {BackgroundColor3 = GUI.SelectedTheme.ElementBackgroundHover}, 0.2)
            Animations:Create(tabStroke, {Transparency = 0}, 0.2)
        end)

        tab.Button.MouseLeave:Connect(function()
            if not tab.Instance.Visible then
                Animations:Create(tab.Button, {BackgroundColor3 = GUI.SelectedTheme.ElementBackground}, 0.2)
                Animations:Create(tabStroke, {Transparency = 0.5}, 0.2)
            end
        end)

        table.insert(window.Tabs, tab)
        if #window.Tabs == 1 then
            tab.Instance.Visible = true
            tab.Button.BackgroundColor3 = GUI.SelectedTheme.ElementBackgroundHover
            tabStroke.Transparency = 0
        end

        function tab:CreateButton(name, callback)
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(1, -10, 0, 35)
            button.Position = UDim2.new(0, 5, 0, #tab.Elements * 40)
            button.Text = name
            button.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
            button.TextColor3 = GUI.SelectedTheme.TextColor
            button.Font = Config.Font
            button.TextStrokeTransparency = 0.8
            button.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            button.Parent = tab.Instance

            local uiStroke = Instance.new("UIStroke")
            uiStroke.Color = GUI.SelectedTheme.ElementStroke
            uiStroke.Thickness = 1.5
            uiStroke.Transparency = 0.5
            uiStroke.Parent = button

            button.MouseButton1Click:Connect(function()
                local success, err = pcall(callback)
                if not success then
                    debugLog("Ошибка callback кнопки " .. name .. ": " .. tostring(err), "error")
                end
            end)

            button.MouseEnter:Connect(function()
                Animations:Create(button, {BackgroundColor3 = GUI.SelectedTheme.ElementBackgroundHover, Size = UDim2.new(1, -10, 0, 37)}, 0.2)
                Animations:Create(uiStroke, {Transparency = 0}, 0.2)
            end)

            button.MouseLeave:Connect(function()
                Animations:Create(button, {BackgroundColor3 = GUI.SelectedTheme.ElementBackground, Size = UDim2.new(1, -10, 0, 35)}, 0.2)
                Animations:Create(uiStroke, {Transparency = 0.5}, 0.2)
            end)

            table.insert(tab.Elements, button)
            debugLog("Кнопка создана: " .. name .. ", Visible: " .. tostring(button.Visible), "info")
            return button
        end

        function tab:CreateToggle(name, default, callback, flag)
            local toggle = {
                Value = default or false,
                Callback = callback or function() end,
                Flag = flag,
            }

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, -10, 0, 35)
            frame.Position = UDim2.new(0, 5, 0, #tab.Elements * 40)
            frame.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
            frame.BackgroundTransparency = 0.2
            frame.Parent = tab.Instance

            local uiStroke = Instance.new("UIStroke")
            uiStroke.Color = GUI.SelectedTheme.ElementStroke
            uiStroke.Thickness = 1.5
            uiStroke.Transparency = 0.5
            uiStroke.Parent = frame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.7, 0, 1, 0)
            label.Text = name
            label.TextColor3 = GUI.SelectedTheme.TextColor
            label.Font = Config.Font
            label.TextStrokeTransparency = 0.8
            label.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            label.BackgroundTransparency = 1
            label.Parent = frame

            local switch = Instance.new("TextButton")
            switch.Size = UDim2.new(0, 40, 0, 20)
            switch.Position = UDim2.new(0.85, 0, 0.25, 0)
            switch.Text = toggle.Value and "On" or "Off"
            switch.BackgroundColor3 = toggle.Value and GUI.SelectedTheme.ToggleEnabled or GUI.SelectedTheme.ToggleDisabled
            switch.TextColor3 = GUI.SelectedTheme.TextColor
            switch.Font = Config.Font
            switch.Parent = frame

            local switchStroke = Instance.new("UIStroke")
            switchStroke.Color = toggle.Value and GUI.SelectedTheme.ToggleEnabledStroke or GUI.SelectedTheme.ToggleDisabledStroke
            switchStroke.Thickness = 1
            switchStroke.Parent = switch

            switch.MouseButton1Click:Connect(function()
                toggle.Value = not toggle.Value
                switch.Text = toggle.Value and "On" or "Off"
                switch.BackgroundColor3 = toggle.Value and GUI.SelectedTheme.ToggleEnabled or GUI.SelectedTheme.ToggleDisabled
                switchStroke.Color = toggle.Value and GUI.SelectedTheme.ToggleEnabledStroke or GUI.SelectedTheme.ToggleDisabledStroke
                local success, err = pcall(toggle.Callback, toggle.Value)
                if not success then
                    debugLog("Ошибка callback переключателя " .. name .. ": " .. tostring(err), "error")
                end
                if toggle.Flag then
                    OmniUI.Flags[toggle.Flag] = toggle.Value
                    if window.ConfigSaving.Enabled then
                        Configurations:Save(OmniUI.Flags)
                    end
                end
                debugLog("Переключатель " .. name .. ": " .. (toggle.Value and "Вкл" or "Выкл"), "info")
            end)

            switch.MouseEnter:Connect(function()
                Animations:Create(switch, {Size = UDim2.new(0, 42, 0, 22)}, 0.2)
                Animations:Create(switchStroke, {Transparency = 0}, 0.2)
            end)

            switch.MouseLeave:Connect(function()
                Animations:Create(switch, {Size = UDim2.new(0, 40, 0, 20)}, 0.2)
                Animations:Create(switchStroke, {Transparency = 0.5}, 0.2)
            end)

            table.insert(tab.Elements, frame)
            debugLog("Переключатель создан: " .. name .. ", Visible: " .. tostring(frame.Visible), "info")
            return toggle
        end

        function tab:CreateSlider(name, range, increment, suffix, default, callback, flag)
            local slider = {
                Value = default or range[1],
                Callback = callback or function() end,
                Flag = flag,
            }

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, -10, 0, 50)
            frame.Position = UDim2.new(0, 5, 0, #tab.Elements * 55)
            frame.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
            frame.BackgroundTransparency = 0.2
            frame.Parent = tab.Instance

            local uiStroke = Instance.new("UIStroke")
            uiStroke.Color = GUI.SelectedTheme.ElementStroke
            uiStroke.Thickness = 1.5
            uiStroke.Transparency = 0.5
            uiStroke.Parent = frame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, -10, 0, 20)
            label.Text = name
            label.TextColor3 = GUI.SelectedTheme.TextColor
            label.Font = Config.Font
            label.TextStrokeTransparency = 0.8
            label.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            label.BackgroundTransparency = 1
            label.Parent = frame

            local sliderBar = Instance.new("Frame")
            sliderBar.Size = UDim2.new(1, -10, 0, 8)
            sliderBar.Position = UDim2.new(0, 5, 0, 30)
            sliderBar.BackgroundColor3 = GUI.SelectedTheme.SliderBackground
            sliderBar.Parent = frame

            local progress = Instance.new("Frame")
            progress.Size = UDim2.new((slider.Value - range[1]) / (range[2] - range[1]), 0, 1, 0)
            progress.BackgroundColor3 = GUI.SelectedTheme.SliderProgress
            progress.Parent = sliderBar

            local progressStroke = Instance.new("UIStroke")
            progressStroke.Color = GUI.SelectedTheme.SliderStroke
            progressStroke.Thickness = 1
            progressStroke.Parent = progress

            local valueLabel = Instance.new("TextLabel")
            valueLabel.Size = UDim2.new(0, 50, 0, 20)
            valueLabel.Position = UDim2.new(1, -55, 0, 0)
            valueLabel.Text = tostring(slider.Value) .. (suffix or "")
            valueLabel.TextColor3 = GUI.SelectedTheme.TextColor
            valueLabel.Font = Config.Font
            valueLabel.TextStrokeTransparency = 0.8
            valueLabel.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            valueLabel.BackgroundTransparency = 1
            valueLabel.Parent = frame

            local dragging
            sliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    debugLog("Начато перетаскивание слайдера: " .. name, "info")
                end
            end)

            sliderBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                    debugLog("Перетаскивание слайдера завершено: " .. name, "info")
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mouseX = input.Position.X
                    local barX = sliderBar.AbsolutePosition.X
                    local barWidth = sliderBar.AbsoluteSize.X
                    local relative = math.clamp((mouseX - barX) / barWidth, 0, 1)
                    slider.Value = math.floor(range[1] + (range[2] - range[1]) * relative / increment + 0.5) * increment
                    progress.Size = UDim2.new(relative, 0, 1, 0)
                    valueLabel.Text = tostring(slider.Value) .. (suffix or "")
                    local success, err = pcall(slider.Callback, slider.Value)
                    if not success then
                        debugLog("Ошибка callback слайдера " .. name .. ": " .. tostring(err), "error")
                    end
                    if slider.Flag then
                        OmniUI.Flags[slider.Flag] = slider.Value
                        if window.ConfigSaving.Enabled then
                            Configurations:Save(OmniUI.Flags)
                        end
                    end
                    debugLog("Слайдер " .. name .. ": Значение " .. slider.Value, "info")
                end
            end)

            table.insert(tab.Elements, frame)
            debugLog("Слайдер создан: " .. name .. ", Visible: " .. tostring(frame.Visible), "info")
            return slider
        end

        function tab:CreateInput(name, placeholder, default, callback, flag)
            local input = {
                Value = default or "",
                Callback = callback or function() end,
                Flag = flag,
            }

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, -10, 0, 35)
            frame.Position = UDim2.new(0, 5, 0, #tab.Elements * 40)
            frame.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
            frame.BackgroundTransparency = 0.2
            frame.Parent = tab.Instance

            local uiStroke = Instance.new("UIStroke")
            uiStroke.Color = GUI.SelectedTheme.ElementStroke
            uiStroke.Thickness = 1.5
            uiStroke.Transparency = 0.5
            uiStroke.Parent = frame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.5, 0, 1, 0)
            label.Text = name
            label.TextColor3 = GUI.SelectedTheme.TextColor
            label.Font = Config.Font
            label.TextStrokeTransparency = 0.8
            label.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            label.BackgroundTransparency = 1
            label.Parent = frame

            local textBox = Instance.new("TextBox")
            textBox.Size = UDim2.new(0.5, -5, 0, 25)
            textBox.Position = UDim2.new(0.5, 5, 0.15, 0)
            textBox.Text = input.Value
            textBox.PlaceholderText = placeholder or "Введите текст..."
            textBox.TextColor3 = GUI.SelectedTheme.TextColor
            textBox.BackgroundColor3 = GUI.SelectedTheme.InputBackground
            textBox.Font = Config.Font
            textBox.TextStrokeTransparency = 0.8
            textBox.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            textBox.Parent = frame

            local textBoxStroke = Instance.new("UIStroke")
            textBoxStroke.Color = GUI.SelectedTheme.InputStroke
            textBoxStroke.Thickness = 1
            textBoxStroke.Parent = textBox

            textBox.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    input.Value = textBox.Text
                    local success, err = pcall(input.Callback, input.Value)
                    if not success then
                        debugLog("Ошибка callback поля ввода " .. name .. ": " .. tostring(err), "error")
                    end
                    if input.Flag then
                        OmniUI.Flags[input.Flag] = input.Value
                        if window.ConfigSaving.Enabled then
                            Configurations:Save(OmniUI.Flags)
                        end
                    end
                    debugLog("Поле ввода " .. name .. ": Значение " .. input.Value, "info")
                end
            end)

            table.insert(tab.Elements, frame)
            debugLog("Поле ввода создано: " .. name .. ", Visible: " .. tostring(frame.Visible), "info")
            return input
        end

        function tab:CreateDropdown(name, options, default, multiple, callback, flag)
            local dropdown = {
                Value = default or (multiple and {} or options[1]),
                Callback = callback or function() end,
                Flag = flag,
                Multiple = multiple,
            }

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, -10, 0, 35)
            frame.Position = UDim2.new(0, 5, 0, #tab.Elements * 40)
            frame.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
            frame.BackgroundTransparency = 0.2
            frame.Parent = tab.Instance

            local uiStroke = Instance.new("UIStroke")
            uiStroke.Color = GUI.SelectedTheme.ElementStroke
            uiStroke.Thickness = 1.5
            uiStroke.Transparency = 0.5
            uiStroke.Parent = frame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.5, 0, 1, 0)
            label.Text = name
            label.TextColor3 = GUI.SelectedTheme.TextColor
            label.Font = Config.Font
            label.TextStrokeTransparency = 0.8
            label.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            label.BackgroundTransparency = 1
            label.Parent = frame

            local dropdownButton = Instance.new("TextButton")
            dropdownButton.Size = UDim2.new(0.5, -5, 0, 25)
            dropdownButton.Position = UDim2.new(0.5, 5, 0.15, 0)
            dropdownButton.Text = multiple and table.concat(dropdown.Value, ", ") or dropdown.Value
            dropdownButton.BackgroundColor3 = GUI.SelectedTheme.DropdownUnselected
            dropdownButton.TextColor3 = GUI.SelectedTheme.TextColor
            dropdownButton.Font = Config.Font
            dropdownButton.TextStrokeTransparency = 0.8
            dropdownButton.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            dropdownButton.Parent = frame

            local dropdownStroke = Instance.new("UIStroke")
            dropdownStroke.Color = GUI.SelectedTheme.ElementStroke
            dropdownStroke.Thickness = 1
            dropdownStroke.Parent = dropdownButton

            local dropdownList = Instance.new("Frame")
            dropdownList.Size = UDim2.new(0.5, -5, 0, 0)
            dropdownList.Position = UDim2.new(0.5, 5, 0, 30)
            dropdownList.BackgroundColor3 = GUI.SelectedTheme.DropdownUnselected
            dropdownList.BackgroundTransparency = 0.2
            dropdownList.Visible = false
            dropdownList.Parent = frame

            local listStroke = Instance.new("UIStroke")
            listStroke.Color = GUI.SelectedTheme.ElementStroke
            listStroke.Thickness = 1
            listStroke.Parent = dropdownList

            local uiListLayout = Instance.new("UIListLayout")
            uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            uiListLayout.Parent = dropdownList

            local function updateList()
                for _, child in ipairs(dropdownList:GetChildren()) do
                    if child:IsA("TextButton") then
                        child:Destroy()
                    end
                end
                local height = 0
                for _, option in ipairs(options) do
                    local optionButton = Instance.new("TextButton")
                    optionButton.Size = UDim2.new(1, 0, 0, 25)
                    optionButton.Text = option
                    optionButton.BackgroundColor3 = (multiple and table.find(dropdown.Value, option)) or (dropdown.Value == option) and GUI.SelectedTheme.DropdownSelected or GUI.SelectedTheme.DropdownUnselected
                    optionButton.TextColor3 = GUI.SelectedTheme.TextColor
                    optionButton.Font = Config.Font
                    optionButton.TextStrokeTransparency = 0.8
                    optionButton.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
                    optionButton.Parent = dropdownList

                    local optionStroke = Instance.new("UIStroke")
                    optionStroke.Color = GUI.SelectedTheme.ElementStroke
                    optionStroke.Thickness = 1
                    optionStroke.Parent = optionButton

                    optionButton.MouseButton1Click:Connect(function()
                        if multiple then
                            if table.find(dropdown.Value, option) then
                                table.remove(dropdown.Value, table.find(dropdown.Value, option))
                            else
                                table.insert(dropdown.Value, option)
                            end
                        else
                            dropdown.Value = option
                            dropdownList.Visible = false
                        end
                        dropdownButton.Text = multiple and table.concat(dropdown.Value, ", ") or dropdown.Value
                        updateList()
                        local success, err = pcall(dropdown.Callback, dropdown.Value)
                        if not success then
                            debugLog("Ошибка callback выпадающего списка " .. name .. ": " .. tostring(err), "error")
                        end
                        if dropdown.Flag then
                            OmniUI.Flags[dropdown.Flag] = dropdown.Value
                            if window.ConfigSaving.Enabled then
                                Configurations:Save(OmniUI.Flags)
                            end
                        end
                        debugLog("Выпадающий список " .. name .. ": Выбрано " .. (multiple and table.concat(dropdown.Value, ", ") or dropdown.Value), "info")
                    end)
                    height = height + 25
                end
                dropdownList.Size = UDim2.new(0.5, -5, 0, math.min(height, 100))
            end

            updateList()

            dropdownButton.MouseButton1Click:Connect(function()
                dropdownList.Visible = not dropdownList.Visible
                debugLog("Выпадающий список " .. name .. ": Видимость " .. tostring(dropdownList.Visible), "info")
            end)

            table.insert(tab.Elements, frame)
            debugLog("Выпадающий список создан: " .. name .. ", Visible: " .. tostring(frame.Visible), "info")
            return dropdown
        end

        function tab:CreateKeybind(name, default, hold, callback, flag)
            local keybind = {
                Value = default or "None",
                Callback = callback or function() end,
                Flag = flag,
                Hold = hold,
                Binding = false,
            }

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, -10, 0, 35)
            frame.Position = UDim2.new(0, 5, 0, #tab.Elements * 40)
            frame.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
            frame.BackgroundTransparency = 0.2
            frame.Parent = tab.Instance

            local uiStroke = Instance.new("UIStroke")
            uiStroke.Color = GUI.SelectedTheme.ElementStroke
            uiStroke.Thickness = 1.5
            uiStroke.Transparency = 0.5
            uiStroke.Parent = frame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.5, 0, 1, 0)
            label.Text = name
            label.TextColor3 = GUI.SelectedTheme.TextColor
            label.Font = Config.Font
            label.TextStrokeTransparency = 0.8
            label.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            label.BackgroundTransparency = 1
            label.Parent = frame

            local keybindButton = Instance.new("TextButton")
            keybindButton.Size = UDim2.new(0.5, -5, 0, 25)
            keybindButton.Position = UDim2.new(0.5, 5, 0.15, 0)
            keybindButton.Text = keybind.Value
            keybindButton.BackgroundColor3 = GUI.SelectedTheme.InputBackground
            keybindButton.TextColor3 = GUI.SelectedTheme.TextColor
            keybindButton.Font = Config.Font
            keybindButton.TextStrokeTransparency = 0.8
            keybindButton.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            keybindButton.Parent = frame

            local keybindStroke = Instance.new("UIStroke")
            keybindStroke.Color = GUI.SelectedTheme.ElementStroke
            keybindStroke.Thickness = 1
            keybindStroke.Parent = keybindButton

            keybindButton.MouseButton1Click:Connect(function()
                keybind.Binding = true
                keybindButton.Text = "..."
                debugLog("Начата привязка клавиши: " .. name, "info")
            end)

            local connection = UserInputService.InputBegan:Connect(function(input, processed)
                if keybind.Binding and not processed then
                    local key = input.KeyCode.Name
                    if key ~= "Unknown" then
                        keybind.Value = key
                        keybindButton.Text = key
                        keybind.Binding = false
                        local success, err = pcall(keybind.Callback, key)
                        if not success then
                            debugLog("Ошибка callback привязки " .. name .. ": " .. tostring(err), "error")
                        end
                        if keybind.Flag then
                            OmniUI.Flags[keybind.Flag] = keybind.Value
                            if window.ConfigSaving.Enabled then
                                Configurations:Save(OmniUI.Flags)
                            end
                        end
                        debugLog("Привязка клавиши " .. name .. ": " .. key, "info")
                    end
                elseif keybind.Value ~= "None" and input.KeyCode.Name == keybind.Value and not processed then
                    if keybind.Hold then
                        local held = true
                        local holdConnection
                        holdConnection = input.Changed:Connect(function(prop)
                            if prop == "UserInputState" then
                                held = false
                                holdConnection:Disconnect()
                            end
                        end)
                        task.spawn(function()
                            while held do
                                local success, err = pcall(keybind.Callback, true)
                                if not success then
                                    debugLog("Ошибка callback удержания " .. name .. ": " .. tostring(err), "error")
                                end
                                task.wait()
                            end
                            local success, err = pcall(keybind.Callback, false)
                            if not success then
                                debugLog("Ошибка callback отпускания " .. name .. ": " .. tostring(err), "error")
                            end
                        end)
                    else
                        local success, err = pcall(keybind.Callback, true)
                        if not success then
                            debugLog("Ошибка callback нажатия " .. name .. ": " .. tostring(err), "error")
                        end
                    end
                end
            end)

            frame.Destroying:Connect(function()
                connection:Disconnect()
                debugLog("Подключение клавиши для " .. name .. " отключено", "info")
            end)

            table.insert(tab.Elements, frame)
            debugLog("Привязка клавиши создана: " .. name .. ", Visible: " .. tostring(frame.Visible), "info")
            return keybind
        end

        function tab:CreateLabel(name, icon, color, warning)
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, -10, 0, 30)
            label.Position = UDim2.new(0, 5, 0, #tab.Elements * 35)
            label.Text = name
            label.TextColor3 = color or (warning and Color3.fromRGB(255, 50, 50) or GUI.SelectedTheme.TextColor)
            label.Font = Config.Font
            label.TextStrokeTransparency = 0.8
            label.TextStrokeColor3 = warning and Color3.fromRGB(200, 0, 0) or GUI.SelectedTheme.TextGlow
            label.BackgroundTransparency = 1
            label.Parent = tab.Instance

            if icon then
                local iconLabel = Instance.new("ImageLabel")
                iconLabel.Size = UDim2.new(0, 20, 0, 20)
                iconLabel.Position = UDim2.new(0, -25, 0, 5)
                iconLabel.Image = Icons:GetIcon(icon)
                iconLabel.BackgroundTransparency = 1
                iconLabel.Parent = label
            end

            table.insert(tab.Elements, label)
            debugLog("Метка создана: " .. name .. ", Visible: " .. tostring(label.Visible), "info")
            return label
        end

        function tab:CreateParagraph(title, content)
            local paragraph = Instance.new("Frame")
            paragraph.Size = UDim2.new(1, -10, 0, 55)
            paragraph.Position = UDim2.new(0, 5, 0, #tab.Elements * 60)
            paragraph.BackgroundColor3 = GUI.SelectedTheme.ElementBackground
            paragraph.BackgroundTransparency = 0.2
            paragraph.Parent = tab.Instance

            local uiStroke = Instance.new("UIStroke")
            uiStroke.Color = GUI.SelectedTheme.ElementStroke
            uiStroke.Thickness = 1.5
            uiStroke.Transparency = 0.5
            uiStroke.Parent = paragraph

            local titleLabel = Instance.new("TextLabel")
            titleLabel.Size = UDim2.new(1, -10, 0, 20)
            titleLabel.Text = title
            titleLabel.TextColor3 = GUI.SelectedTheme.TextColor
            titleLabel.Font = Config.Font
            titleLabel.TextStrokeTransparency = 0.8
            titleLabel.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            titleLabel.BackgroundTransparency = 1
            titleLabel.Parent = paragraph

            local contentLabel = Instance.new("TextLabel")
            contentLabel.Size = UDim2.new(1, -10, 0, 35)
            contentLabel.Position = UDim2.new(0, 5, 0, 20)
            contentLabel.Text = content
            contentLabel.TextColor3 = GUI.SelectedTheme.TextColor
            contentLabel.Font = Config.Font
            contentLabel.TextStrokeTransparency = 0.8
            contentLabel.TextStrokeColor3 = GUI.SelectedTheme.TextGlow
            contentLabel.TextWrapped = true
            contentLabel.BackgroundTransparency = 1
            contentLabel.Parent = paragraph

            table.insert(tab.Elements, paragraph)
            debugLog("Параграф создан: " .. title .. ", Visible: " .. tostring(paragraph.Visible), "info")
            return paragraph
        end

        debugLog("Вкладка создана: " .. tabName .. ", Visible: " .. tostring(tab.Instance.Visible), "info")
        return tab
    end

    function window:SetVisible(visible)
        window.Visible = visible
        window.Hidden = not visible
        window.Instance.Enabled = visible
        if visible then
            Animations:Create(window.MainFrame, {Position = UDim2.new(0.5, -225, 0.5, -200), BackgroundTransparency = 0}, 0.7)
        else
            Animations:Create(window.MainFrame, {Position = UDim2.new(0.5, -225, 0.5, 200), BackgroundTransparency = 1}, 0.7)
        end
        debugLog("Окно " .. window.Name .. ": Видимость " .. tostring(visible), "info")
    end

    function window:LoadConfiguration()
        if not window.ConfigSaving.Enabled then
            debugLog("Сохранение конфигурации отключено для окна: " .. window.Name, "info")
            return
        end
        local data = Configurations:Load()
        for flag, value in pairs(data) do
            if OmniUI.Flags[flag] then
                OmniUI.Flags[flag] = value
                debugLog("Флаг загружен: " .. flag .. " = " .. tostring(value), "info")
            end
        end
    end

    local keybindConnection = UserInputService.InputBegan:Connect(function(input, processed)
        if input.KeyCode.Name == window.Keybind and not processed then
            window:SetVisible(not window.Visible)
            debugLog("Клавиша нажата: " .. window.Keybind .. ", переключение видимости", "info")
        end
    end)

    window.Instance.Destroying:Connect(function()
        keybindConnection:Disconnect()
        if dragConnection then
            dragConnection:Disconnect()
        end
        debugLog("Окно уничтожено: " .. window.Name, "info")
    end)

    debugLog("Окно создано: " .. window.Name .. ", Parent: " .. window.Instance.Parent.Name, "info")

    GUI.Windows[window.Name] = window
    Analytics:SendReport()
    return window
end

-- Инициализация
OmniUI.GUI = GUI
OmniUI.API = API
OmniUI.Configurations = Configurations
OmniUI.Analytics = Analytics
OmniUI.Animations = Animations
OmniUI.Icons = Icons

-- Пример использования
if RunService:IsStudio() then
    debugLog("Запуск тестового окна в Roblox Studio", "info")
    local window = GUI:CreateWindow({
        Name = "CyberForge Hack",
        ConfigurationSaving = { Enabled = true, FileName = "HackConfig" },
    })

    local tab = window:CreateTab("Exploits", "Default")
    tab:CreateButton("God Mode", function()
        local playerId = Players.LocalPlayer and Players.LocalPlayer.UserId or "Unknown"
        local data = API:UpdateInventory(playerId, "god_mode", 1)
    end)

    tab:CreateToggle("Speed Hack", false, function(value)
        local playerId = Players.LocalPlayer and Players.LocalPlayer.UserId or "Unknown"
        local data = API:UpdateInventory(playerId, "speed_hack", value and 1 or 0)
    end, "SpeedHackToggle")

    tab:CreateSlider("Health", {0, 100}, 10, "%", 50, function(value)
    end, "HealthSlider")

    tab:CreateInput("Target Player", "Введите имя игрока...", "", function(text)
    end, "TargetInput")

    tab:CreateDropdown("Exploit Mode", {"Silent", "Aggressive", "Stealth"}, "Silent", false, function(mode)
    end, "ExploitModeDropdown")

    tab:CreateKeybind("Teleport", "T", false, function()
    end, "TeleportKeybind")

    tab:CreateLabel("Статус: Онлайн", "Info")
    tab:CreateParagraph("CyberForge", "Разрушайте систему с мощью OmniUI.")

    window:LoadConfiguration()

    task.spawn(function()
        task.wait(5)
        GUI:ChangeTheme("NeonTokyo")
    end)
end

return OmniUI
